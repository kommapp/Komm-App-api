part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

class RelationsApi {
  final RelationsApiDelegate apiDelegate;

  RelationsApi(ApiClient apiClient) : apiDelegate = RelationsApiDelegate(apiClient);

  /// Profile List By User
  Future<List<Relation>> getRelationships(String profileId, {Options? options}) async {
    final response = await apiDelegate.getRelationships(
      profileId,
      options: options,
    );

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    if (__body == null) {
      throw ApiException(500, 'Received an empty body (not in a 204)');
    }

    return await apiDelegate.getRelationships_decode(__body);
  }

  /// Request relationship
  Future<void> relationshipRequest({Options? options, RequestRelationBody? requestRelationBody}) async {
    final response = await apiDelegate.relationshipRequest(options: options, requestRelationBody: requestRelationBody);

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    return;
  }

  /// Response relationship
  ///   -1 -> cancel
  ///    1 -> accept
  ///    2 -> reject
  Future<void> relationshipResponse({Options? options, ResponseRelationBody? responseRelationBody}) async {
    final response =
        await apiDelegate.relationshipResponse(options: options, responseRelationBody: responseRelationBody);

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    return;
  }
}

class RelationsApiDelegate {
  final ApiClient apiClient;

  RelationsApiDelegate(this.apiClient);

  Future<ApiResponse> getRelationships(String profileId, {Options? options}) async {
    // create path and map variables
    final __path =
        '/relationships/{profileId}'.replaceAll('{' + 'profileId' + '}', LocalApiClient.parameterToString(profileId)!);

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = [];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'GET';

    return await apiClient.invokeAPI(__path, queryParams, null, authNames, opt);
  }

  Future<List<Relation>> getRelationships_decode(Stream<List<int>> body) async {
    return (LocalApiClient.deserializeFromString(await utf8.decodeStream(body), 'List<Relation>') as List)
        .map((item) => item as Relation)
        .toList();
  }

  Future<ApiResponse> relationshipRequest({Options? options, RequestRelationBody? requestRelationBody}) async {
    Object? postBody = requestRelationBody;

    // create path and map variables
    final __path = '/relationships/request';

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = ['application/json'];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }
    postBody = postBody == null ? null : LocalApiClient.serialize(postBody);

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'POST';

    return await apiClient.invokeAPI(__path, queryParams, postBody, authNames, opt);
  }

  Future<void> relationshipRequest_decode(Stream<List<int>> body) async {}

  Future<ApiResponse> relationshipResponse({Options? options, ResponseRelationBody? responseRelationBody}) async {
    Object? postBody = responseRelationBody;

    // create path and map variables
    final __path = '/relationships/response';

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = ['application/json'];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }
    postBody = postBody == null ? null : LocalApiClient.serialize(postBody);

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'POST';

    return await apiClient.invokeAPI(__path, queryParams, postBody, authNames, opt);
  }

  Future<void> relationshipResponse_decode(Stream<List<int>> body) async {}
}
