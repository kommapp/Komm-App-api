part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

class PoiApi {
  final PoiApiDelegate apiDelegate;

  PoiApi(ApiClient apiClient) : apiDelegate = PoiApiDelegate(apiClient);

  Future<void> createPoi({Options? options, CreatePoiRequest? createPoiRequest}) async {
    final response = await apiDelegate.createPoi(options: options, createPoiRequest: createPoiRequest);

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    return;
  }

  Future<void> deletePoiById(String poiId, {Options? options}) async {
    final response = await apiDelegate.deletePoiById(
      poiId,
      options: options,
    );


    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    return;
  }

  Future<List<Poi>> getCurrentProfilePois(String profileId, {Options? options}) async {
    final response = await apiDelegate.getCurrentProfilePois(
      profileId,
      options: options,
    );

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    if (__body == null) {
      throw ApiException(500, 'Received an empty body (not in a 204)');
    }

    return await apiDelegate.getCurrentProfilePois_decode(__body);
  }

  Future<Poi> getPoiById(String poiId, {Options? options}) async {
    final response = await apiDelegate.getPoiById(
      poiId,
      options: options,
    );

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    if (__body == null) {
      throw ApiException(500, 'Received an empty body (not in a 204)');
    }

    return await apiDelegate.getPoiById_decode(__body);
  }

  Future<void> updatePoi({Options? options, CreatePoiRequest? createPoiRequest}) async {
    final response = await apiDelegate.updatePoi(options: options, createPoiRequest: createPoiRequest);

    if (![200, 400].contains(response.statusCode)) {
      throw ApiException(500, 'Invalid response code ${response.statusCode} returned from API');
    }

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes(__body));
    }

    return;
  }
}

class PoiApiDelegate {
  final ApiClient apiClient;

  PoiApiDelegate(this.apiClient);

  Future<ApiResponse> createPoi({Options? options, CreatePoiRequest? createPoiRequest}) async {
    Object? postBody = createPoiRequest;

    // create path and map variables
    final __path = '/poi';

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = ['application/json'];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }
    postBody = postBody == null ? null : LocalApiClient.serialize(postBody);

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'POST';

    return await apiClient.invokeAPI(__path, queryParams, postBody, authNames, opt);
  }

  Future<void> createPoi_decode(Stream<List<int>> body) async {}

  Future<ApiResponse> deletePoiById(String poiId, {Options? options}) async {
    // create path and map variables
    final __path = '/poi/{poiId}'.replaceAll('{' + 'poiId' + '}', LocalApiClient.parameterToString(poiId)!);

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = [];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'DELETE';

    return await apiClient.invokeAPI(__path, queryParams, null, authNames, opt);
  }

  Future<void> deletePoiById_decode(Stream<List<int>> body) async {}

  Future<ApiResponse> getCurrentProfilePois(String profileId, {Options? options}) async {
    // create path and map variables
    final __path =
        '/poi/profile/{profileId}'.replaceAll('{' + 'profileId' + '}', LocalApiClient.parameterToString(profileId)!);

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = [];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'GET';

    return await apiClient.invokeAPI(__path, queryParams, null, authNames, opt);
  }

  Future<List<Poi>> getCurrentProfilePois_decode(Stream<List<int>> body) async {
    return (LocalApiClient.deserializeFromString(await utf8.decodeStream(body), 'List<Poi>') as List)
      .map((item) => item as Poi)
      .toList();
  }

  Future<ApiResponse> getPoiById(String poiId, {Options? options}) async {
    // create path and map variables
    final __path = '/poi/{poiId}'.replaceAll('{' + 'poiId' + '}', LocalApiClient.parameterToString(poiId)!);

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = [];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'GET';

    return await apiClient.invokeAPI(__path, queryParams, null, authNames, opt);
  }

  Future<Poi> getPoiById_decode(Stream<List<int>> body) async {
    return LocalApiClient.deserializeFromString(await utf8.decodeStream(body), 'Poi') as Poi;
  }

  Future<ApiResponse> updatePoi({Options? options, CreatePoiRequest? createPoiRequest}) async {
    Object? postBody = createPoiRequest;

    // create path and map variables
    final __path = '/poi';

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>['oauth2'];
    final opt = options ?? Options();

    final contentTypes = ['application/json'];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }
    postBody = postBody == null ? null : LocalApiClient.serialize(postBody);

    headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'PATCH';

    return await apiClient.invokeAPI(__path, queryParams, postBody, authNames, opt);
  }

  Future<void> updatePoi_decode(Stream<List<int>> body) async {}
}
