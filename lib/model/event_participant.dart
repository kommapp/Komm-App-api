part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

// EventParticipant
class EventParticipant {
  String? id;
  String? nick;
  String? phrase;
  String? picture;
  int? status;
  bool? blocked;
  bool? relation;
  int? statusRelation;
  String? chatId;
  bool? valoration;
  int? score;
  String? comment;
  num? percentAssist;
  int? totalAssists;
  int? totalEvents;
  String? type;
  String? date;

  EventParticipant({
    this.id,
    this.nick,
    this.phrase,
    this.picture,
    this.status,
    this.blocked,
    this.relation,
    this.statusRelation,
    this.chatId,
    this.valoration,
    this.score,
    this.comment,
    this.percentAssist,
    this.totalAssists,
    this.totalEvents,
    this.type,
    this.date,
  });

  bool get isNormal => type == ProfileType.normal;
  bool get isVip => type == ProfileType.vip;
  bool get isPro => type == ProfileType.pro;

  @override
  String toString() {
    return 'EventParticipant[id=$id, nick=$nick, phrase=$phrase, picture=$picture, status=$status, blocked=$blocked, relation=$relation, statusRelation=$statusRelation, chatId=$chatId, valoration=$valoration, score=$score, comment=$comment, percentAssist=$percentAssist, totalAssists=$totalAssists, totalEvents=$totalEvents, type=$type, valoration=$valoration, date=$date, ]';
  }

  fromJson(Map<String, dynamic>? json) {
    if (json == null) return;

    id = (json[r'id'] == null) ? null : (json[r'id'] as String?);
    nick = (json[r'nick'] == null) ? null : (json[r'nick'] as String?);
    phrase = (json[r'phrase'] == null) ? null : (json[r'phrase'] as String?);
    picture = (json[r'picture'] == null) ? null : (json[r'picture'] as String?);
    status = (json[r'status'] == null) ? null : (json[r'status'] as int?);
    blocked = (json[r'blocked'] == null) ? null : (json[r'blocked'] as bool?);
    relation = (json[r'relation'] == null) ? null : (json[r'relation'] as bool?);
    statusRelation = (json[r'statusRelation'] == null) ? null : (json[r'statusRelation'] as int?);
    chatId = (json[r'chatId'] == null) ? null : (json[r'chatId'] as String?);
    valoration = (json[r'valoration'] == null) ? null : (json[r'valoration'] as bool?);
    score = (json[r'score'] == null) ? null : (json[r'score'] as int?);
    comment = (json[r'comment'] == null) ? null : (json[r'comment'] as String?);
    percentAssist = (json[r'percent_assist'] == null) ? null : (json[r'percent_assist'] as num?);
    totalAssists = (json[r'totalAssists'] == null) ? null : (json[r'totalAssists'] as int?);
    totalEvents = (json[r'totalEvents'] == null) ? null : (json[r'totalEvents'] as int?);
    type = (json[r'type'] == null) ? null : (json[r'type'] as String?);
    date = (json[r'date'] == null) ? null : (json[r'date'] as String?);
  }

  EventParticipant.fromJson(Map<String, dynamic>? json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (id != null) {
      json[r'id'] = id;
    }
    if (nick != null) {
      json[r'nick'] = nick;
    }
    if (phrase != null) {
      json[r'phrase'] = phrase;
    }
    if (picture != null) {
      json[r'picture'] = picture;
    }
    if (status != null) {
      json[r'status'] = status;
    }
    if (blocked != null) {
      json[r'blocked'] = blocked;
    }
    if (relation != null) {
      json[r'relation'] = relation;
    }
    if (statusRelation != null) {
      json[r'statusRelation'] = statusRelation;
    }
    if (chatId != null) {
      json[r'chatId'] = chatId;
    }
    if (valoration != null) {
      json[r'valoration'] = valoration;
    }
    if (score != null) {
      json[r'score'] = score;
    }
    if (comment != null) {
      json[r'comment'] = comment;
    }
    if (percentAssist != null) {
      json[r'percent_assist'] = percentAssist;
    }
    if (totalAssists != null) {
      json[r'totalAssists'] = totalAssists;
    }
    if (totalEvents != null) {
      json[r'totalEvents'] = totalEvents;
    }
    if (type != null) {
      json[r'type'] = type;
    }
    if (date != null) {
      json[r'date'] = date;
    }
    return json;
  }

  static List<EventParticipant> listFromJson(List<dynamic>? json) {
    return json == null ? <EventParticipant>[] : json.map((value) => EventParticipant.fromJson(value)).toList();
  }

  static Map<String, EventParticipant> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, EventParticipant>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = EventParticipant.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is EventParticipant && runtimeType == __other.runtimeType) {
      return id == __other.id &&
          nick == __other.nick &&
          phrase == __other.phrase &&
          picture == __other.picture &&
          status == __other.status &&
          blocked == __other.blocked &&
          relation == __other.relation &&
          statusRelation == __other.statusRelation &&
          chatId == __other.chatId &&
          valoration == __other.valoration &&
          score == __other.score &&
          comment == __other.comment &&
          percentAssist == __other.percentAssist &&
          totalAssists == __other.totalAssists &&
          totalEvents == __other.totalEvents &&
          type == __other.type && 
	  date == __other.date;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (id != null) {
      hashCode = hashCode * 31 + id.hashCode;
    }

    if (nick != null) {
      hashCode = hashCode * 31 + nick.hashCode;
    }

    if (phrase != null) {
      hashCode = hashCode * 31 + phrase.hashCode;
    }

    if (picture != null) {
      hashCode = hashCode * 31 + picture.hashCode;
    }

    if (status != null) {
      hashCode = hashCode * 31 + status.hashCode;
    }

    if (blocked != null) {
      hashCode = hashCode * 31 + blocked.hashCode;
    }

    if (relation != null) {
      hashCode = hashCode * 31 + relation.hashCode;
    }

    if (statusRelation != null) {
      hashCode = hashCode * 31 + statusRelation.hashCode;
    }

    if (chatId != null) {
      hashCode = hashCode * 31 + chatId.hashCode;
    }

    if (valoration != null) {
      hashCode = hashCode * 31 + valoration.hashCode;
    }

    if (score != null) {
      hashCode = hashCode * 31 + score.hashCode;
    }

    if (comment != null) {
      hashCode = hashCode * 31 + comment.hashCode;
    }

    if (percentAssist != null) {
      hashCode = hashCode * 31 + percentAssist.hashCode;
    }

    if (totalAssists != null) {
      hashCode = hashCode * 31 + totalAssists.hashCode;
    }

    if (totalEvents != null) {
      hashCode = hashCode * 31 + totalEvents.hashCode;
    }

    if (type != null) {
      hashCode = hashCode * 31 + type.hashCode;
    }

    if (date != null) {
      hashCode = hashCode * 31 + date.hashCode;
    }

    return hashCode;
  }

  EventParticipant copyWith({
    String? id,
    String? nick,
    String? phrase,
    String? picture,
    int? status,
    bool? blocked,
    bool? relation,
    int? statusRelation,
    String? chatId,
    bool? valoration,
    int? score,
    String? comment,
    num? percentAssist,
    int? totalAssists,
    int? totalEvents,
    String? type,
    String? date,
  }) {
    id ??= this.id;
    nick ??= this.nick;
    phrase ??= this.phrase;
    picture ??= this.picture;
    status ??= this.status;
    blocked ??= this.blocked;
    relation ??= this.relation;
    statusRelation ??= this.statusRelation;
    chatId ??= this.chatId;
    valoration ??= this.valoration;
    score ??= this.score;
    comment ??= this.comment;
    percentAssist ??= this.percentAssist;
    totalAssists ??= this.totalAssists;
    totalEvents ??= this.totalEvents;
    type ??= this.type;
    date ??= this.date;

    final _copy_id = id;
    final _copy_nick = nick;
    final _copy_phrase = phrase;
    final _copy_picture = picture;
    final _copy_status = status;
    final _copy_blocked = blocked;
    final _copy_relation = relation;
    final _copy_statusRelation = statusRelation;
    final _copy_chatId = chatId;
    final _copy_valoration = valoration;
    final _copy_score = score;
    final _copy_comment = comment;
    final _copy_percentAssist = this.percentAssist;
    final _copy_totalAssists = this.totalAssists;
    final _copy_totalEvents = this.totalEvents;
    final _copy_type = this.type;
    final _copy_date = this.date;

    return EventParticipant(
      id: _copy_id,
      nick: _copy_nick,
      phrase: _copy_phrase,
      picture: _copy_picture,
      status: _copy_status,
      blocked: _copy_blocked,
      relation: _copy_relation,
      statusRelation: _copy_statusRelation,
      chatId: _copy_chatId,
      valoration: _copy_valoration,
      score: _copy_score,
      comment: _copy_comment,
      percentAssist: _copy_percentAssist,
      totalAssists: _copy_totalAssists,
      totalEvents: _copy_totalEvents,
      type: _copy_type,
      date: _copy_date,
    );
  }
}
