part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

// ProfileNotification_notifications
class ProfileNotificationNotifications {
  num? chat;
  num? relation;
  num? event;
  num? candidate;

  ProfileNotificationNotifications({
    this.chat,
    this.relation,
    this.event,
    this.candidate,
  });

  @override
  String toString() {
    return 'ProfileNotificationNotifications[chat=$chat, relation=$relation, event=$event, candidate=$candidate]';
  }

  fromJson(Map<String, dynamic>? json) {
    if (json == null) return;

    chat = (json[r'chat'] == null) ? null : (json[r'chat'] as num?);

    relation = (json[r'relation'] == null) ? null : (json[r'relation'] as num?);

    event = (json[r'event'] == null) ? null : (json[r'event'] as num?);

    candidate = (json[r'candidate'] == null) ? null : (json[r'candidate'] as num?);
  }

  ProfileNotificationNotifications.fromJson(Map<String, dynamic>? json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (chat != null) {
      json[r'chat'] = chat;
    }
    if (relation != null) {
      json[r'relation'] = relation;
    }
    if (event != null) {
      json[r'event'] = event;
    }
    if (candidate != null) {
      json[r'candidate'] = candidate;
    }
    return json;
  }

  static List<ProfileNotificationNotifications> listFromJson(List<dynamic>? json) {
    return json == null
        ? <ProfileNotificationNotifications>[]
        : json.map((value) => ProfileNotificationNotifications.fromJson(value)).toList();
  }

  static Map<String, ProfileNotificationNotifications> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, ProfileNotificationNotifications>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = ProfileNotificationNotifications.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is ProfileNotificationNotifications && runtimeType == __other.runtimeType) {
      return chat == __other.chat && relation == __other.relation && event == __other.event;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (chat != null) {
      hashCode = hashCode * 31 + chat.hashCode;
    }

    if (relation != null) {
      hashCode = hashCode * 31 + relation.hashCode;
    }

    if (event != null) {
      hashCode = hashCode * 31 + event.hashCode;
    }

    if (candidate != null) {
      hashCode = hashCode * 31 + candidate.hashCode;
    }

    return hashCode;
  }

  ProfileNotificationNotifications copyWith({
    num? chat,
    num? relation,
    num? event,
    num? candidate,
  }) {
    chat ??= this.chat;
    relation ??= this.relation;
    event ??= this.event;
    candidate ??= this.candidate;

    final _copy_chat = chat;
    final _copy_relation = relation;
    final _copy_event = event;
    final _copy_candidate = candidate;

    return ProfileNotificationNotifications(
      chat: _copy_chat,
      relation: _copy_relation,
      event: _copy_event,
      candidate: _copy_candidate,
    );
  }
}
