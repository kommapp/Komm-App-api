part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

// GridsByProfileResponse_inner
class GridProfile {
  String?      id;
  String?      name;
  String?      phrase;
  String?      picture;
  List<Hobby>? hobbies = [];
  int?         phase;
  String?      type;

  GridProfile({
    this.id,
    this.name,
    this.phrase,
    this.picture,
    this.hobbies,
    this.phase,
    this.type,
  });

  bool get isVip => type == ProfileType.vip;
  bool get isPro => type == ProfileType.pro;

  @override
  String toString() {
    return 'GridsByProfileResponseInner[id=$id, name=$name, phrase=$phrase, picture=$picture, phase=$phase, hobbies=$hobbies, type=$type, ]';
  }

  fromJson(Map<String, dynamic>? json) {
    if (json == null) return;

    id      = (json[r'id'] == null) ? null : (json[r'id'] as String?);
    name    = (json[r'name'] == null) ? null : (json[r'name'] as String?);
    phrase  = (json[r'phrase'] == null) ? null : (json[r'phrase'] as String?);
    picture = (json[r'picture'] == null) ? null : (json[r'picture'] as String?);
    phase   = (json[r'phase'] == null) ? null : (json[r'phase'] as int?);

    {
      final _jsonData = json[r'hobbies'];
      hobbies = (_jsonData == null)
        ? []
        : ((dynamic data) {
            return Hobby.listFromJson(data);
          }(_jsonData));
    } // _jsonFieldName

    type = (json[r'type'] == null) ? null : (json[r'type'] as String?);
  }

  GridProfile.fromJson(Map<String, dynamic>? json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};

    if (id != null) {
      json[r'id'] = id;
    }
    if (name != null) {
      json[r'name'] = name;
    }
    if (phrase != null) {
      json[r'phrase'] = phrase;
    }
    if (picture != null) {
      json[r'picture'] = picture;
    }
    if (hobbies != null) {
      json[r'hobbies'] = hobbies?.map((v) => LocalApiClient.serialize(v)).toList();
    }
    if (phase != null) {
      json[r'phase'] = phase;
    }
    if (type != null) {
      json[r'type'] = type;
    }
    return json;
  }

  static List<GridProfile> listFromJson(List<dynamic>? json) {
    return json == null
      ? <GridProfile>[]
      : json.map((value) => GridProfile.fromJson(value)).toList();
  }

  static Map<String, GridProfile> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, GridProfile>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = GridProfile.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is GridProfile && runtimeType == __other.runtimeType) {
      return id == __other.id &&
        name == __other.name &&
        phrase == __other.phrase &&
        picture == __other.picture &&
        const ListEquality().equals(hobbies, __other.hobbies) &&
        phase == __other.phase &&
        type == __other.type;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (id != null) {
      hashCode = hashCode * 31 + id.hashCode;
    }

    if (name != null) {
      hashCode = hashCode * 31 + name.hashCode;
    }

    if (phrase != null) {
      hashCode = hashCode * 31 + phrase.hashCode;
    }

    if (picture != null) {
      hashCode = hashCode * 31 + picture.hashCode;
    }

    if (hobbies != null) {
      hashCode = hashCode * 31 + const ListEquality().hash(hobbies);
    }

    if (phase != null) {
      hashCode = hashCode * 31 + phase.hashCode;
    }

    if (type != null) {
      hashCode = hashCode * 31 + type.hashCode;
    }

    return hashCode;
  }

  GridProfile copyWith({
    String?      id,
    String?      name,
    String?      phrase,
    String?      picture,
    List<Hobby>? hobbies,
    int?         phase,
    String?      type,
  }) {
    id ??= this.id;
    name ??= this.name;
    phrase ??= this.phrase;
    picture ??= this.picture;
    hobbies ??= this.hobbies;
    phase ??= this.phase;
    type ??= this.type;

    final _copy_id = id;
    final _copy_name = name;
    final _copy_phrase = phrase;
    final _copy_picture = picture;
    final _copy_hobbies = (hobbies == null)
      ? [] as List<Hobby>?
      : ((List<Hobby>? data) {
          return data?.map((data) => data.copyWith()).toList();
        }(hobbies));

    final _copy_phase = phase;

    final _copy_type = type;

    return GridProfile(
      id     : _copy_id,
      name   : _copy_name,
      phrase : _copy_phrase,
      picture: _copy_picture,
      hobbies: _copy_hobbies,
      type   : _copy_type,
      phase  : _copy_phase
    );
  }
}
