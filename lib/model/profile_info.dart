part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

// ProfileInfo
class ProfileInfo {
  /* Identifier of the object */
  String? id;
  String? nick;
  String? phrase;
  String? picture;
  bool? status = true;
  bool? public = true;
  String? type;
  List<Hobby>? hobbies = [];
  String? hobbyCategory;

  ProfileInfo({
    this.id,
    this.nick,
    this.phrase,
    this.picture,
    this.status,
    this.public,
    this.type,
    this.hobbies,
    this.hobbyCategory,
  });

  bool get isVip => type == ProfileType.vip;
  bool get isPro => type == ProfileType.pro;

  @override
  String toString() {
    return 'ProfileInfo[id=$id, nick=$nick, phrase=$phrase, picture=$picture, status=$status, public=$public, type=$type, hobbies=$hobbies, hobbyCategory=$hobbyCategory]';
  }

  fromJson(Map<String, dynamic>? json) {
    if (json == null) return;

    id = (json[r'id'] == null) ? null : (json[r'id'] as String?);
    nick = (json[r'nick'] == null) ? null : (json[r'nick'] as String?);
    phrase = (json[r'phrase'] == null) ? null : (json[r'phrase'] as String?);
    picture = (json[r'picture'] == null) ? null : (json[r'picture'] as String?);
    status = (json[r'status'] == null) ? null : (json[r'status'] == 1);
    public = (json[r'public'] == null) ? null : (json[r'public'] == 1);
    type = (json[r'type'] == null ? null : (json[r'type'] as String?));
    hobbyCategory = (json[r'hobbyCategory'] == null ? null : (json[r'hobbyCategory'] as String?));

    {
      final _jsonData = json[r'hobbies'];
      hobbies = (_jsonData == null)
          ? []
          : ((dynamic data) {
              return Hobby.listFromJson(data);
            }(_jsonData));
    } // _jsonFieldName
  }

  ProfileInfo.fromJson(Map<String, dynamic>? json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (id != null) {
      json[r'id'] = id;
    }
    if (nick != null) {
      json[r'nick'] = nick;
    }
    if (phrase != null) {
      json[r'phrase'] = phrase;
    }
    if (picture != null) {
      json[r'picture'] = picture;
    }
    if (status != null) {
      json[r'status'] = status;
    }
    if (public != null) {
      json[r'public'] = public;
    }
    if (type != null) {
      json[r'type'] = type;
    }
    if (hobbies != null) {
      json[r'hobbies'] = hobbies?.map((v) => LocalApiClient.serialize(v)).toList();
    }
    if (hobbyCategory != null) {
      json[r'hobbyCategory'] = hobbyCategory;
    }
    return json;
  }

  static List<ProfileInfo> listFromJson(List<dynamic>? json) {
    return json == null ? <ProfileInfo>[] : json.map((value) => ProfileInfo.fromJson(value)).toList();
  }

  static Map<String, ProfileInfo> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, ProfileInfo>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = ProfileInfo.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is ProfileInfo && runtimeType == __other.runtimeType) {
      return id == __other.id &&
          nick == __other.nick &&
          phrase == __other.phrase &&
          picture == __other.picture &&
          status == __other.status &&
          public == __other.public &&
          type == __other.type &&
	  hobbyCategory == __other.hobbyCategory &&
          const ListEquality().equals(hobbies, __other.hobbies);
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (id != null) {
      hashCode = hashCode * 31 + id.hashCode;
    }

    if (nick != null) {
      hashCode = hashCode * 31 + nick.hashCode;
    }

    if (phrase != null) {
      hashCode = hashCode * 31 + phrase.hashCode;
    }

    if (picture != null) {
      hashCode = hashCode * 31 + picture.hashCode;
    }

    if (status != null) {
      hashCode = hashCode * 31 + status.hashCode;
    }

    if (public != null) {
      hashCode = hashCode * 31 + public.hashCode;
    }

    if (type != null) {
      hashCode = hashCode * 31 + type.hashCode;
    }

    if (hobbies != null) {
      hashCode = hashCode * 31 + const ListEquality().hash(hobbies);
    }

    if (hobbyCategory != null) {
      hashCode = hashCode * 31 + hobbyCategory.hashCode;
    }

    return hashCode;
  }

  ProfileInfo copyWith({
    String? id,
    String? nick,
    String? phrase,
    String? picture,
    bool? status,
    bool? public,
    String? type,
    List<Hobby>? hobbies,
    String? hobbyCategory,
  }) {
    id ??= this.id;
    nick ??= this.nick;
    phrase ??= this.phrase;
    picture ??= this.picture;
    status ??= this.status;
    public ??= this.public;
    type ??= this.type;
    hobbies ??= this.hobbies;
    hobbyCategory ??= this.hobbyCategory;

    final _copy_id = id;
    final _copy_nick = nick;
    final _copy_phrase = phrase;
    final _copy_picture = picture;
    final _copy_status = status;
    final _copy_public = public;
    final _copy_type = type;
    final _copy_hobbies = (hobbies == null)
        ? <Hobby>[]
        : ((List<Hobby>? data) {
            return data?.map((data) => data.copyWith()).toList();
          }(hobbies));
    final _copy_hobbyCategory = hobbyCategory;

    return ProfileInfo(
      id: _copy_id,
      nick: _copy_nick,
      phrase: _copy_phrase,
      picture: _copy_picture,
      status: _copy_status,
      public: _copy_public,
      type: _copy_type,
      hobbies: _copy_hobbies,
      hobbyCategory: _copy_hobbyCategory
    );
  }
}
