part of komm.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.

// ChangePasswordRequest
class ChangePasswordRequest {
  String? oldPassword;

  String? newPassword;

  ChangePasswordRequest({
    this.oldPassword,
    this.newPassword,
  });

  @override
  String toString() {
    return 'ChangePasswordRequest[oldPassword=$oldPassword, newPassword=$newPassword, ]';
  }

  fromJson(Map<String, dynamic>? json) {
    if (json == null) return;

    oldPassword = (json[r'old_password'] == null)
        ? null
        : (json[r'old_password'] as String?);

    newPassword = (json[r'new_password'] == null)
        ? null
        : (json[r'new_password'] as String?);
  }

  ChangePasswordRequest.fromJson(Map<String, dynamic>? json) {
    fromJson(json); // allows child classes to call
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (oldPassword != null) {
      json[r'old_password'] = oldPassword;
    }
    if (newPassword != null) {
      json[r'new_password'] = newPassword;
    }
    return json;
  }

  static List<ChangePasswordRequest> listFromJson(List<dynamic>? json) {
    return json == null
        ? <ChangePasswordRequest>[]
        : json.map((value) => ChangePasswordRequest.fromJson(value)).toList();
  }

  static Map<String, ChangePasswordRequest> mapFromJson(
      Map<String, dynamic>? json) {
    final map = <String, ChangePasswordRequest>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) =>
          map[key] = ChangePasswordRequest.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is ChangePasswordRequest &&
        runtimeType == __other.runtimeType) {
      return oldPassword == __other.oldPassword &&
          newPassword == __other.newPassword;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (oldPassword != null) {
      hashCode = hashCode * 31 + oldPassword.hashCode;
    }

    if (newPassword != null) {
      hashCode = hashCode * 31 + newPassword.hashCode;
    }

    return hashCode;
  }

  ChangePasswordRequest copyWith({
    String? oldPassword,
    String? newPassword,
  }) {
    oldPassword ??= this.oldPassword;
    newPassword ??= this.newPassword;

    final _copy_oldPassword = oldPassword;
    final _copy_newPassword = newPassword;

    return ChangePasswordRequest(
      oldPassword: _copy_oldPassword,
      newPassword: _copy_newPassword,
    );
  }
}
